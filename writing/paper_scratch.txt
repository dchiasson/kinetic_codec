https://www.mdpi.com/journal/sensors/special_issues/sensors_tech_human_move

Guest Editors: Dr. Winson Lee

               Dr. Emre Sariyildiz

Submission Deadline: 31 August 2020

Versioning explained:
Before every local edit, increment minor number
Before any co-author review, increment major number, and set minor to zero


Many developing sensor applications will soon utilize the real-time processing of kinematic data signals. These include virtual reality, autonimous driving, IoT, healthcare, wearable electronics, and among others. These applications have been enabled by the recent explosion of cheap intertial based sensors which can measure rotational velocity and linear acceleration. From an information network perspective, kinematic data represents an entirely new field of multimedia data which is starkly unexplored compared to the more mature cousins of text, audio, and video. In order to enable these modern applications, technniques for processing and interperting kinematic data must be developed.

This study focuses on highly practical approaches which can be used in modern applications. To demonstrate this, all compression techniques have been implemented and released as open-source C code using fixed point computations. The hope of the authors is that this code can be a starting point for academic or industry developers implementing some kinematic data application on any type of computational platform.

INTRODUCTION
This paper explores techniques for compression of the kinematic signal.
Compression is important because it can give a quantitative measurement of signal understanding.
It is also an aspect of signal processing which cannot be ported over from neighboring, more mature applications. This is due to the pidgeon hole principal.

Human movement, independent locations

METHOD
Certain practical restraints were considered in the selection of compression algorithms to compare in this study. This is to ensure that techniques can be efficiently implemented in real world signal processing applications. These restraints are:
Lossless: Based on results from audio compression, this restraint will likely cost us several orders of magnitude in the best compression rate achieved. However, without a single well-defined application, it is necessary.
Low order computation: Quantitatively defined later based on emperical loss of our fixed point conversion (to separate this from overfitting) 
Causal: Basic requirement of a real-time filter


Hypothesis:
Significant compression gain can be achieved by utilizing gyroscope/accelerometer cross sensor correlation
Rotating gravity model will yeild superior compression

Rice encoding
This is equivalent to hypothesising that our data is geometrically distributed around zero. As we expect to be able to make a more accurate prediction of value of sensor data than zero, this technique is used as a baseline comparison. All proceeding techniques also used Rice encoding after their described transformation has occured.
Difference encoding (consider just gyro difference vs rice)
Hypothesise that the signal never changes
Linear interpolation
2nd-5th order polynomial interpolation
spline interpolation
Physics based modeling: non-precessing gravity
ML generated IIR filter: leave one out validation (patient)

RESULTS
Compression levels
Broken down by Acceleromter and Gyroscope


DISCUSSION
For practical applications, significant, low hanging gain is seen from switching from text (csv, json) to binary formats.
Difference encoding performs suprisingly well compared with more complex techniques such as Free rotation in the presense of gravity, and ML models. Particularly the poor performance of the ML model does not demonstrate a significant level of correlation between accelerometer and gyroscope signal as the author had hypothesised.

data: one sensor hardware for a realistic application, open source data for comparison (data between sensors cannot be compared, only relative to the same sensor and the same class of behaviors) explore various hardware, downsampling


